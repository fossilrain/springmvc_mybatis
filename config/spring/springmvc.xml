<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd 
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd"> 
		
	<!-- 静态资源解析
	包括：js、css、....
	 -->
    <mvc:resources location="/EasyUI/" mapping="/EasyUI/**"></mvc:resources>    
	<!-- 视图解析器 
	解析jsp，默认使用jstl标签，classpath下需要有jstl包
	-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置以下前缀和后缀后，视图路径可缩短  如："/WEB-INF/jsp/items/itemlist.jsp"可写为"items/itemlist"-->
		<property name="prefix" value="/WEB-INF/jsp/"></property>
		<!-- <property name="suffix" value=".jsp"></property> -->
	</bean>

	<!-- （处理器映射器【注解】）处理器映射器 
		3.1之后使用如下映射器（不配置将使用默认的，不正确）
	-->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"></bean> -->
	<!-- （处理器适配器【注解】）处理器适配器 
		3.1之后使用如下适配器 （不配置将使用默认的，不正确）
	-->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"></bean> -->

	<!-- 可以使用mvc:annotation-driven代替上边的注解 处理器映射器和处理器适配器
	mvc:annotation-driven默认加载很多的参数绑定方法
	比如json转换解析器默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
	实际开发中使用mvc:annotation-driven
	-->
	<mvc:annotation-driven conversion-service="conversionService" validator="validator"></mvc:annotation-driven>

	<!-- 配置注解的处理器（可以单个配置）
	实际开发中建议使用组件扫描
	 -->
	<!-- <bean class="cn.com.rf.ssm.controller.annotation.ItemsController3"></bean> -->
	<!-- 可以扫描controller、service。。。
	这里让扫描controller，制定controller的包，使用扫描可以将上边的非扫描注释掉
	 -->
	<context:component-scan base-package="com.smm.controller"></context:component-scan> 
	<!-- 自定义参数绑定 -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<!-- 转换器 -->
		<property name="converters">
			<list>
				<!-- 日期类型转换 -->
				<bean class="com.smm.controller.converter.CustomDateConverter"></bean>
			</list>
		</property>
	</bean>
	<!-- 校验器 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- hibernator校验器 -->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator"></property>
		<!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的 ValidationMessages.properties-->
		<property name="validationMessageSource" ref="messageSource"></property>
	</bean>
	<!-- 校验错误信息配置文件 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 资源文件名 -->
		<property name="basenames">
			<list>
				<value>classpath:customValidationMessage</value>
				<value>classpath:i18n/i18n</value>
			</list>
		</property>
		<!-- 资源文件编码格式 -->
		<property name="fileEncodings" value="utf-8"></property>
		<!-- 对资源文件内容缓存时间，单位秒 -->
		<property name="cacheSeconds" value="120"></property>
	</bean>
	<!-- 全局异常处理器
		只要实现了HandlerExceptionResolver接口，就是全局异常处理器,有多个类实现了该接口，只有一个起作用
	 -->
	<bean class="com.smm.exception.CustomExceptionResolver"></bean>
	<!-- 文件上传 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	    <!-- one of the properties available; the maximum file size in bytes -->
	    <property name="maxUploadSize" value="1000000"/>
	</bean>
	<!-- 国际化 -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" /> 
    <!-- 此处使用上边的messageSource
    <bean id="messageSource"
            class="org.springframework.context.support.ResourceBundleMessageSource">
       	<property name="basenames">
            <list>
                <value>format</value>
                <value>exceptions</value>
                <value>windows</value>
            </list>
        </property>
    </bean> -->
	<!-- 拦截器 -->
	<mvc:interceptors>
		<!-- 多个拦截器顺序执行 -->
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
		<!-- 登录认证拦截器 -->
		<mvc:interceptor>
	        <mvc:mapping path="/**"/>
	        <bean class="com.smm.interceptor.LoginInterceptor"/>
	    </mvc:interceptor>
	    <mvc:interceptor>
	        <mvc:mapping path="/**"/>
	        <!-- <mvc:exclude-mapping path="/admin/**"/> -->
	        <bean class="com.smm.interceptor.HandlerInterceptor1"/>
	    </mvc:interceptor>
	    <mvc:interceptor>
	        <mvc:mapping path="/**"/>
	        <bean class="com.smm.interceptor.HandlerInterceptor2"/>
	    </mvc:interceptor>
	</mvc:interceptors>
	
</beans>